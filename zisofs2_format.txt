
                        Description of the zisofs2 Format
                                  Revision 2.0-dev

                           as of zisofs2-tools by
                   Valentín KIVACHUK BURDÁ and Thomas SCHMITT

                                1 Oct 2020


The zisofs format was invented by H. Peter Anvin and extended by Valentín KIVACHUK BURDÁ 
and Thomas Schmitt. It compresses data file content, marks it by a header and provides a 
pointer array for coarse random access. Within a RRIP enhanced ISO 9660 image the format 
is additionally marked by a System Use entry with signature "ZF".

The uncompressed size of a single zisofs compressed file is restricted
to 2^64 - 1 bytes. Larger files shall not be compressed.



                                Data Types

ISO 9660:7.3.1 - standard - little endian 4-byte words
ISO 9660:7.1.1 - standard - unsigned single bytes
ISO 9660:7.3.3 - standard - 4-byte word in both byte orders, first little endian, then big endian.
#uin64_l       - custom   - low-order of a 8 byte value stored as 7.3.1
#uin64_h       - custom   - high-order of a 8 byte value stored as 7.3.1
#uin64         - custom   - 8-byte word in little endian, first #uin64_l, then #uin64_h

                                Supported algorithms

The file header has this layout:
    @alg_id       @alg_char                Description
     0            'pz' (70)(7A)            Zlib with 32 bit block pointers
     1            'PZ' (50)(5A)            Zlib with 64 bit block pointers
     2            'XZ' (78)(7A)            LZMA2 (xz container)
     3            'L4' (6C)(34)            LZ4
     4            'ZD' (7A)(64)            Zstandard
     5            'B2' (62)(32)            Bzip2

@alg_id is a 7.1.1 value. @alg_char is 2 ASCII characters stored as 2 bytes


                                File Header

The file header has this layout:
    Byte offset   iso9660 type     Identifier       Contents
      0           (8 bytes)        @hdr_magic       Magic number (37 E4 53 96 C9 DB D6 07)
      8           7.3.1            @ufs_l           Uncompressed file size (low-order bytes) #uin64_l
     12           7.1.1            @hdr_size        header_size >> 2 (currently 8)
     13           7.1.1            @hdr_bsize       log2(block_size)
     14           (2 bytes)        N/A              Reserved. Must be zero
     16           7.1.1            @alg_id          Algorithm Type
     17           7.1.1            @alg_strat       Algorithm strategy
     18           7.3.1            @ufs_h           Uncompressed file size (high-order bytes) #uin64_h
     22           (10 bytes)                        Reserved, must be zero

So its size is 32.

Previous version of ZF used a header of 16 bytes with 4 bytes dedicated to the uncompressed file size (max 4 GiB).
In order to extend that limitation without breaking legacy software which supports ZF, a #uint64 is
used with 2 bytes of speration between. Supported files (smaller than 4 GiB) with legacy code (ZISOFSv1)
will be mapped correctly. Bigger files will have undefined behaviour

The @alg_strat defines the compression algorithm strategy. If set to 0 (default), each block
of data will be compressed independently (like done in ZISOFSv1 with zlib). Other values are not allowed for now.

Readers shall be able to handle log2(block_size) values 15, 16 and 17
i.e. block sizes 32 kB, 64 kB, and 128 kB. Writers must not use other sizes.


                               Block Pointers

There are ceil(input_size / @hdr_bsize) input resp. output blocks.
Each input block is of fixed size whereas the output blocks have varying
size (down to 0). For each output block there is an offset pointer giving
its byte address in the overall file content. The next block pointer in the
array tells the start of the next block which begins immediately after the
end of its predecessor. A final pointer (*eob*) gives the first invalid byte address
and thus marks the end of the last block

So there are ceil(input_size / @hdr_bsize) + 1 block pointers.
They are stored directly after the file header, i.e. beginning at byte 32, 
as an array of #uint64 values. For supporting old readers, values of type ISO 7.3.1
must be used when @alg_id is 0 ('pz')



                                 Data Part

The data part begins immediately after the pointer array (*eob*). In principle it
consists of the variable length output blocks as delivered by different compression algorithms
when fed with the fixed size input blocks.

For homogeneity, all output blocks must be compressed independently (as done in ZISOFSv1)

A special case of input and output block is defined:
Zero-length blocks represent a block full of 0-bytes.
Such input blocks do not get processed by compress2() but shall be mapped to
0-sized output directly. Vice versa 0-sized blocks have to bypass uncompress()
when being read.


                         ZF System Use Entry Format

ZF may only be applied to files with a single extent and less than 4 GiB of
uncompressed size.

The ZF entry follows the general layout of SUSP resp. RRIP.
Its fields are:

  [1] "BP 1 to BP 2 - Signature Word" shall be (5A)(46) ("ZF").

  [2] "BP 3 - Length" shall specify as an 8-bit number the length in bytes of
      the ZF entry recorded according to ISO 9660:7.1.1.
      This length is 17 decimal.

  [3] "BP 4 - System Use Entry Version" shall be 2 as in ISO 9660:7.1.1.

  [4] "BP 5 to BP 6 - Algorithm"  shall be two chars to indicate the
      compression algorithm. For example, (70)(7A) ("pz")
      (This is a copy of @alg_char)

  [5] "BP 7 - Header Size Div 4" shall specify as an 8-bit number the number of
      4-byte words in the header part of the file data recorded according
      to ISO 9660:7.1.1.
      (This is a copy of header byte 12 (@hdr_size), resp. header BP 13).

  [6] "BP 8 - Log2 of Block Size" shall specify as an 8-bit number the binary
      logarithm of the compression block size recorded according to
      ISO 9660:7.1.1.
      (This is a copy of header byte 13 (@hdr_bsize), resp. header BP 14.
       The value has to be 15, 16 or 17 i.e. 32 kiB, 64 kiB, or 128 kiB.)

  [7] "BP 9 to BP 16 - Virtual Uncompressed File Size" shall contain
      as a 64-bit unsigned little endian number the uncompressed 
      file size represented by the given extent.

  [8] "BP 25 - Algorithm strategy" shall be 0 as in ISO 9660:7.1.1.
      (This is a copy of @alg_strat)
       

  | 'Z' | 'F' | LENGTH | 2 | 'p' | 'z' | HEADER SIZE DIV 4 | LOG2 BLOCK SIZE
  | UNCOMPRESSED SIZE | ALGORITHM STRATEGY |

Example (block size 128 kiB, uncompressed file size = 40 TB):
  { 'Z',  'F',  24,   2,  'p',  'z',    8,   17,
   0x00, 0x80, 0xCA, 0x39, 0x61, 0x24, 0x00, 0x00,
   0x00 }


-------------------------------------------------------------------------------
Revoked specification aspects:

A comment in zisofs-tools-1.0.8 indicates a special case of output block:
  "a block the length of which is equal to the block size is unencoded."
This is not implemented in zisofs-tools and in the Linux kernel. Existing
zisofs enhanced ISO images might contain encoded blocks which could be
mistaken for unencoded blocks.
Therefore this rule is not part of this description and must not be
implemented.

-------------------------------------------------------------------------------
References:

zisofs2-tools
  https://github.com/vk496/zisofs2-tools

zisofs-tools
  http://freshmeat.net/projects/zisofs-tools/

zlib:
  /usr/include/zlib.h

cdrtools with mkisofs
  ftp://ftp.berlios.de/pub/cdrecord/alpha

ECMA-119 aka ISO 9660
  http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-119.pdf

SUSP 1.12
  ftp://ftp.ymi.com/pub/rockridge/susp112.ps

RRIP 1.12
  ftp://ftp.ymi.com/pub/rockridge/rrip112.ps

-------------------------------------------------------------------------------

This text is under
Copyright (c) 2009 - 2010 Thomas Schmitt <scdbackup@gmx.net>
It shall reflect the effective technical specifications as implemented in
zisofs-tools and the Linux kernel. So please contact mailing list
<libburn-hackers@pykix.org> or to the copyright holder in private, if you
want to make changes.
Only if you cannot reach the copyright holder for at least one month it is
permissible to modify and distribute this text under the license "BSD revised".

